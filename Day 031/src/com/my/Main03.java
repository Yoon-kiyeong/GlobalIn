package com.my;
/*
 * 생성자
 * 
 * - 메모리 내에 객체가 생성될 때 호출되어 객체의 구조를 인식하게 하고 생성되는 멤버 변수들을 초기화 하는데 목적을 둠
 * 
 * - 생성자명은 클래스명과 같아야 하고 return type을 정의하지 않아야 한다.
 * - 프로그래머가 어떠한 생성자도 정의하지 않았을 경우 컴파일러가 기본 생성자를 자동으로 정의해 준다.
 * 
 * 생성자의 접근 제한자의 의미
 * 1. 생성자의 접근제한을 둘 경우 해당 객체를 생성할 수 있는 접근 권한을 가진다
 * 2. 클래스의 접근제한이 public으로 정의 되어도 생성자를 private로 정의하면 클래스 내부에서만 접근이 가능하다
 * 3. 만약 protected로 정의되는 클래스는 상속관계의 객체들만 생성할 수 있다.
 * 
 * 생성자의 구성
 * [접근제한자] [생셩자명](자료형1 인자1, 자료형2 인자,...) {
 * 수행문;
 * 수행문;
 * }
 * 
 * 생성자의 특징
 * 1. 클래스명과 이름이 똑같다.
 * 2. 반환형을 명시할 수 없다.
 * 3. 클래스 내부에 생성자가 없을 경우는 컴파일러가 기본 생성자를 만들어 놓는다.
 * 4. 하나의 클래스에는 인자의 수가 다르거나 인자의 자료형이 다른 생성자들이 여러개 있을 수 있다. (생성자 오버로딩)
 * 5. 생성자의 첫번째 라인에서 this(인자) 생성자를 사용해서 다른 생성자를 호출할 수 있다.
 * 
 * 생성자의 오버로딩
 * 생성자의 오버로딩은 객체를 생성할 수 있는 방법의 수를 제공하는 것과 같으며
 * 메소드 오버로딩과 다를 것이 없어 각 생성자의 구분 또한 인자로 구분한다.
 * 
 */
public class Main03 {
	private String name; //멤버 필드(인스턴스 변수)
	private int age;
	
	public Main03() {
		name = "이디엇";
	}
	
	public Main03(String n) {
		name = n;
	}
	
	public Main03(String n, int a) { ///매개변수 순서가 바뀌어도 상관 X
		age = a;
		name = n;
	}
	
	public Main03(int a, String n) {
		name = n;
		age = a;
	}

	public String getName() {
		return name;
	}

	public int getAge() {
		return age;
	}
}

