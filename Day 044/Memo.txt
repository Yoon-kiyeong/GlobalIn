테이블에 내용을 추가, 수정, 삭제
1. 테이블에 새로운 행을 추가하는 insert
2. 테이블의 내용을 수정하는 update
3. 테이블에 행을 삭제하는 delete

1.1 테이블에 새로운 행을 추가
- 특정한 칼럼에만 데이터를 추가
insert into 테이블명 (컬럼명1, 컬럼명2, ...) values (값1, 값2, ...);
- 모든 컬럼에 데이터 추가
insert into 테이블명 values(값1, 값2, 값3, ...);
문자와 날짜를 추가할 경우 싱글쿼터 사용('')

1.2 테이블의 내용을 수정하기 위한 update문
- 형식
update 테이블명 set 컬럼명 = 값1, 컬럼명2 = 값2... where 조건

1.3 테이블의 행을 삭제하기 위한 delete문
- 형식
delete from 테이블명 where 조건;
TRUNCATE와 delete의 차이점
- delete 명령어를 사용하여 테이블의 행을 삭제할 경우 행이 많으면 삭제될 때마다 많은 자원이 소모된다.
왜냐하면 delete 명령어는 삭제 이전 상태로 원상복귀할 경우를 생각해서 rollback 정보를 저장하고 있기 때문
- TRUNCATE 명령어를 사용하여 테이블의 행을 상제할 경우 rollback할 수 없음

TCL (Transaction Control Language)
- 트랜잭션은 데이터베이스에서 데이터를 처리하는 하나의 논리적인 작업단위를 의미함
- 이유 : 데이터의 일관성을 유지하고 안정적으로 데이터를 복수 시키기 위해

commit
- 모든 작업들을 정상적으로 처리하겠다고 확정하는 명령어
- 데이터베이스에 모두 반영하기 위해서 변경된 내용을 모두 영구저장 함

rollback
- 작업 중 문제가 발생되어 트랜잭션의 처리 과정에서 발생한 변경 사항을 취소하는 명령
- rollback은 트랜잭션으로 인한 하나의 묶음으로 처리가 시작되기 이전 상태로 되돌림

commit과 rollback 명령어의 장점
1. 데이터의 무결성을 보장함
2. 영구적인 변경 전에 데이터의 변경 사항을 확인할 수 있음
3. 논리적으로 연관된 작업을 그룹화 할 수 있다.

commit
- insert, update, delete 작업 내용을 데이터베이스에 저장
- 이전 데이터가 완전히 수정됨
- 모든 사용자가 변경된 데이터의 결과를 볼 수 있음 

rollback
-insert, update, delete 작업 내용을 취소함
- 이전 커밋한 곳까지만 복구됨

무결성 제약 조건의 개념과 종류
무결성 제약 조건은 데이터를 추가, 수정, 삭제하는 과정에서 무결성을 유지할 수 있도록 제약을 주는 것을 의미함
무결성이란 데이터베이스 내에 데이터의 확장성을 유지하는 것을 의미
제약조건이란 바람직하지 않은 데이터가 저장되는 것을 방지하는 것을 의미함
1. not null : null값을 허용하지 않는다.
2. unique : 중복값을 허용하지 않는다. 항상 유일한 값만 갖는다 
3. primary key : not null과 unique를 조합
4. foreign key : 참조되는 테이블의 컬럼의 값이 존재하면 허용함
5. check : 저장 가능한 데이터 값의 범위나 조건을 지정하여 설정한 값만을 허용

check 제약 조건
- 입력되는 값을 체크하여 설정된 값 이외의 값이 들어오면 오류메시지와 함께 명령이 수행되지 못하게 하는 것을 의미함

제약 조건명 지정하기
사용자가 의미 있게 제약 조건명을 명시하여 제약 조건명만으로도 어떤 제약조건을 위배했는지 알 수 있게 지정하는 방법

형식
제약 조건명
 테이블명 컬럼명 제약조건 유형

제약 조건의 비활성화와 CASCADE
- 제약 조건의 비활성화란 설정된 제약조건을 잠시 사용하지 않게 하는 것을 의미
disable constraint : 제약조건의 비활성화
enable constraint : 제약조건을 해제하여 다시 활성화 시킴

서브 쿼리
하나의 select 문장의 절 안에 포함된 또 하나의 select 문장을 의미함
서브쿼리를 포함하고 있는 쿼리문을 메인 쿼리, 포함된 또 하나의 쿼리를 서브쿼리라고 함
서브쿼리는 비교연산자의 오른쪽에 기술해야하고 반드시 괄호로 감싸야 한다.
서브쿼리는 메인쿼리가 실행되기 전에 한번만 실행된다.

단일행 서브쿼리
- 단일행 서브쿼리는 내부 SELECT 문자으로부터 오직 하나의 행 만을 반환받으며, 단일행 연산자는(=, >, <, <=, >=, <>);

다중행 서브쿼리
- 다중행 서브쿼리는 서브쿼리에서 반환되는 결과가 하나 이상의 행일 때 사용하는 서브쿼리

다중행 연산자
IN 		: 메인 쿼리의 비교조건이 서브쿼리의 결과 중에서 하나라도 참인 경우
ANY, SOME 	: 메인 쿼리의 비교조건이 서브쿼리의 검색 결과의 하나 이상이 일치하면 참
ALL		: 메인 쿼리의 비교조건이 서브쿼리의 검색 결과와 모든 값이 일치하면 참
EXIST		: 메인 쿼리의 비교조건이 서브쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참

IN : 메인 쿼리의 비교 조건이 서브쿼리의 결과 중에서 하나라도 참인 경우 결과가 두개 이상 구해지는 쿼리존을 서브쿼리로 기술할 경우에는 다중 행 연산자와 함께 사용
ALL : 메인 쿼리의 비교조건이 서브쿼리의 검색 결과의 모든 값이 일치하면 참

ANY 연산자
ANY 연산자는 메인 쿼리의 비교 조건이 서브 쿼리의 검색 결과와 하나 이상만 일치하면 참
찾아진 값에서 갖아 작은 값 즉 최소값보다 크면 참이 됨

EXIST : 메인 쿼리의 비교조건이 서브쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참
